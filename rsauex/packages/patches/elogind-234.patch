Kludgy fix for the issue 234.
--- a/src/login/logind-core.c
+++ b/src/login/logind-core.c
@@ -80,6 +80,8 @@ void manager_reset_config(Manager *m) {
         m->kill_exclude_users = strv_free(m->kill_exclude_users);

         m->stop_idle_session_usec = USEC_INFINITY;
+
+        m->suspender_pid = 0;
 }

 int manager_parse_config_file(Manager *m) {
--- a/src/login/logind-dbus.c
+++ b/src/login/logind-dbus.c
@@ -1744,26 +1744,47 @@ static int elogind_execute_shutdown_or_sleep(
                 strv_free( argv_utmp );
         }

-        /* Now perform the requested action */
-        r = elogind_shutdown_or_sleep( m, a->handle );
+        pid_t thr;
+        r = safe_fork( "(suspender...)", FORK_RESET_SIGNALS | FORK_REOPEN_LOG, &thr );

         /* no more pending actions, whether this failed or not */
         m->delayed_action = NULL;

-        if ( r < 0 )
-                return r;
+        if ( r < 0 ) {
+                return log_error_errno( errno, "Failed to fork run %s: %m", "(suspender...)" );
+        }
+
+        if ( r == 0 ) {
+                /* Now perform the requested action */
+                r = elogind_shutdown_or_sleep( m, a->handle );
+
+                /* As elogind can not rely on a systemd manager to call all
+                 * sleeping processes to wake up, we have to tell them all
+                 * by ourselves.
+                 * Note: execute_shutdown_or_sleep() does not send the
+                 *       signal unless an error occurred. */
+                /* (void) send_prepare_for( m, a->inhibit_what, false ); */

-        /* As elogind can not rely on a systemd manager to call all
-         * sleeping processes to wake up, we have to tell them all
-         * by ourselves.
-         * Note: execute_shutdown_or_sleep() does not send the
-         *       signal unless an error occurred. */
-        (void) send_prepare_for( m, a->inhibit_what, false );
+                log_debug_elogind("Exiting from %s", "(suspender...)");
+
+                _exit( r );
+        }
+
+        m->suspender_pid = thr;
+        m->suspender_action = a;

         return 0;
 }
 #endif // 1

+void return_from_suspend(
+                Manager *m) {
+    wait_for_terminate( m->suspender_pid, NULL );
+    (void) send_prepare_for( m, m->suspender_action->inhibit_what, false );
+    m->suspender_pid = 0;
+    m->suspender_action = NULL;
+}
+
 static int execute_shutdown_or_sleep(
                 Manager *m,
                 const HandleActionData *a,
--- a/src/login/logind-dbus.h
+++ b/src/login/logind-dbus.h
@@ -35,3 +35,5 @@ int manager_job_is_active(Manager *manager, const char *path, sd_bus_error *erro
 void manager_load_scheduled_shutdown(Manager *m);

 extern const BusObjectImplementation manager_object;
+
+void return_from_suspend(Manager *m);
--- a/src/login/logind.c
+++ b/src/login/logind.c
@@ -1216,6 +1216,11 @@ static int manager_run(Manager *m) {

                 manager_gc(m, true);

+                log_debug_elogind("SUSPENDER: " PID_FMT ", %d", m->suspender_pid, pid_is_alive(m->suspender_pid));
+                if (m->suspender_pid != 0 && !pid_is_alive(m->suspender_pid)) {
+                    return_from_suspend(m);
+                }
+
                 r = manager_dispatch_delayed(m, false);
                 if (r < 0)
                         return r;
--- a/src/login/logind.h
+++ b/src/login/logind.h
@@ -199,6 +199,9 @@ struct Manager {

         char *efi_loader_entry_one_shot;
         struct stat efi_loader_entry_one_shot_stat;
+
+        pid_t suspender_pid;
+        const HandleActionData *suspender_action;
 };

 void manager_reset_config(Manager *m);
