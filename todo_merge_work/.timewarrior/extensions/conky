#!/usr/bin/env python3

import fileinput
import json
import dateutil.parser
import math
from datetime import timedelta, date, datetime
from dateutil.tz import *

def daterange(start_date, end_date):
    for n in range(int ((end_date - start_date).days)):
        yield start_date + timedelta(n)

def str_dates(tracks):
    for track in tracks:
        start = dateutil.parser.parse(track["start"]).astimezone(tzlocal())
        if "end" in track:
            end = dateutil.parser.parse(track["end"]).astimezone(tzlocal())
        else:
            end = datetime.now(start.tzinfo).astimezone(tzlocal())
        tags = track["tags"]
        yield {"start": start, "end": end, "tags": tags}
            
def read_input ():
    dic = {}
    arr_line = ""
    in_arr = False
    for line in fileinput.input():
        clear_line = line.strip()
        if in_arr:
            arr_line += line
        else:
            if clear_line == "[":
                in_arr = True
                arr_line += line
            else:
                index = clear_line.find(": ")
                dic[clear_line[:index]] = clear_line[index + 2:]
    return [dic, list(str_dates(json.loads(arr_line)))]

[opts, tracks] = read_input()

def __print_bar(bar_type, line, start, length, color):
    [r, g, b] = color
    print("${lua " + "{}bar {} {} {} {} {} {}".format(bar_type, line, start, length, r, g, b) + " }", end="")

def print_tall_bar(line, start, length, color):
    __print_bar("tall_", line, start, length, color)

def print_bar(line, start, length, color):
    __print_bar("", line, start, length, color)

def print_v(line):
    for i in range(0, 25):
        print_tall_bar(line, round(i * 32), 1, [40, 40, 40])

total = 0
total_work = 0
total_away = 0
line = 1

print("       0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23    Total")

for date in daterange(dateutil.parser.parse(opts["temp.report.start"]).astimezone(tzlocal()), dateutil.parser.parse(opts["temp.report.end"]).astimezone(tzlocal())):
    by_date = [track for track in tracks if date <= track["start"] <= (date + timedelta(1))]
    prev = date
    day_total = 0
    day_total_work = 0
    day_total_away = 0
    spaces_till_total = 98
    print(date.strftime("%a %d "), end="")
    print_v(line)
    if date.date() == datetime.today().date():
        print_tall_bar(line, -(7 * 8), 96 * 8 + 1 + 7 * 8, [30, 30, 30])
    elif line % 2 == 1:
        print_tall_bar(line, -(7 * 8), 96 * 8 + 1 + 7 * 8, [20, 20, 20])
    else:
        print_tall_bar(line, -(7 * 8), 96 * 8 + 1 + 7 * 8, [15, 15, 15])
    for cur in by_date:
        start = round(((cur["start"] - prev).seconds / 60) / 1.875)
        mins = (cur["end"] - cur["start"]).seconds / 60
        length = round(mins / 1.875)
        if "Working" in cur["tags"]:
            print_bar(line, start, length, [0, 100, 0])
            day_total_work += mins
        else:
            print_bar(line, start, length, [100, 0, 0])
            day_total_away += mins
        day_total += mins
    print(" " * spaces_till_total, end="")
    if day_total != 0:
        print("W: {:2d}:{:02d}; ".format(math.trunc(day_total_work / 60), math.trunc(day_total_work % 60)), end="")
        print("A: {:2d}:{:02d}; ".format(math.trunc(day_total_away / 60), math.trunc(day_total_away % 60)), end="")
        print("T: {:2d}:{:02d}".format(math.trunc(day_total / 60), math.trunc(day_total % 60)), end="")
    print("")
    
    total += day_total
    total_work += day_total_work
    total_away += day_total_away
    line += 1
    
print("\n Total: ", end="")
print("W: {:2d}:{:02d}; ".format(math.trunc(total_work / 60), math.trunc(total_work % 60)), end="")
print("A: {:2d}:{:02d}; ".format(math.trunc(total_away / 60), math.trunc(total_away % 60)), end="")
print("T: {:2d}:{:02d}".format(math.trunc(total / 60), math.trunc(total % 60)))
